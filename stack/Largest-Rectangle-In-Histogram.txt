Problem: Largest Rectangle in Histogram

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

üß™ Example 1:

Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The largest rectangle is shown in the shaded area, which has a width of 2 and a height of 5. The area is 10.
1. Problem Statement
"Find the largest rectangular area that can be formed within a histogram, where the base of the rectangle is on the x-axis and the heights are given by an array of integers."

üì¶ Input: heights = [2,1,5,6,2,3]

üéØ Output: 10 ‚Äî The area of the rectangle with height 5 and width 2.

2. Real-life Analogy
Imagine you have a group of buildings of different heights standing side-by-side. You want to find the largest possible flat roof you could build on top of them. The height of the roof would be limited by the shortest building in the group. You need to check all possible groups of buildings to find the one that gives you the largest total roof area.

This problem is about finding, for each bar, the largest possible rectangle with that bar as its height. This requires finding the first bar shorter than it to its left and to its right. A Monotonic Stack is perfect for this.

3. Thought Process ‚Äî Natural Logic
A straightforward brute-force approach would involve checking every possible rectangle. We can do this by iterating through every possible start and end index of a contiguous group of bars, finding the minimum height in that range, and calculating the area. This would be inefficient.

The key to an efficient solution is to use a single pass. For each bar, we want to know its "left boundary" and "right boundary" to form the largest possible rectangle with that bar as the height. The boundaries are the first bars to the left and right that are shorter than it.

A Monotonic Stack (specifically, a strictly increasing one) can help us find these boundaries in O(1) time on average. We store indices in the stack. When we find a bar that's shorter than the one on top of the stack, we know the top of the stack's bar can't extend any further to the right. The new bar i becomes its right boundary. The new top of the stack becomes its left boundary.

4. Less Optimized Approach (Brute Force)
Logic:

Initialize max_area = 0.

Use a nested loop. The outer loop i iterates from 0 to n-1 (the left boundary).

The inner loop j iterates from i to n-1 (the right boundary).

Find the min_height within heights[i...j].

Calculate the area = min_height * (j - i + 1).

Update max_area = max(max_area, area).

‚è≥ Time Complexity: O(n¬≤)

üíæ Space Complexity: O(1)

5. Optimized Approach (Monotonic Stack)
üí° Core Idea: Iterate through the histogram. Maintain a stack of indices of bars in increasing height. When a bar shorter than the one on top of the stack is found, we can calculate the area for the popped bar.

Logic:

Initialize stack = [] and max_area = 0.

Append a sentinel height of 0 to the end of the heights array to ensure all remaining items in the stack are processed.

Iterate through the heights array with index i and height h.

While the stack is not empty and h is less than the height of the bar at the top of the stack:

popped_index = stack.pop().

popped_height = heights[popped_index].

The width is determined by i (right boundary) and the new stack top (left boundary).

width = i if the stack is now empty. Otherwise, width = i - stack[-1] - 1.

area = popped_height * width.

max_area = max(max_area, area).

Push the current index i onto the stack.

‚è≥ Time Complexity: O(n) ‚Äî Each bar is pushed onto and popped from the stack at most once.

üíæ Space Complexity: O(n) ‚Äî The stack can store up to n indices in the worst case (e.g., a strictly increasing histogram).

6. Pseudocode (with explanation)
Function largestRectangleArea(heights):
    stack = new empty list/stack
    max_area = 0

    // Add a sentinel 0 at the end to process all remaining bars.
    heights_with_sentinel = heights.append(0)

    For i from 0 to length of heights_with_sentinel - 1:
        current_height = heights_with_sentinel[i]

        // While stack is not empty AND current height is less than
        // the height of the bar at the top of the stack:
        While stack is not empty AND current_height < heights_with_sentinel[stack.peek()]:
            popped_index = stack.pop()
            popped_height = heights_with_sentinel[popped_index]

            // Calculate width.
            If stack is empty:
                width = i
            Else:
                width = i - stack.peek() - 1

            max_area = max(max_area, popped_height * width)

        stack.push(i)

    Return max_area
7. Python Code (with comments)
Python

def largest_rectangle_area(heights):
    stack = []
    max_area = 0

    # Add a sentinel height of 0 to the end.
    heights.append(0)

    for i, h in enumerate(heights):
        # While the stack is not empty and the current height is shorter
        # than the height of the bar at the top of the stack...
        while stack and h < heights[stack[-1]]:
            # Pop the index of the bar whose height defines a potential rectangle.
            popped_index = stack.pop()
            popped_height = heights[popped_index]

            # The width is calculated from the current index (right boundary)
            # and the new top of the stack (left boundary).
            if not stack:
                width = i
            else:
                width = i - stack[-1] - 1

            max_area = max(max_area, popped_height * width)

        # Push the current index onto the stack.
        stack.append(i)

    # Remove the sentinel value
    heights.pop()

    return max_area
8. JavaScript Code (with comments)
JavaScript

/**
 * @param {number[]} heights
 * @return {number}
 */
function largestRectangleArea(heights) {
    const stack = [];
    let maxArea = 0;

    // Add a sentinel height of 0 at the end
    heights.push(0);

    for (let i = 0; i < heights.length; i++) {
        const h = heights[i];

        // While the stack is not empty and the current height is less than
        // the height of the bar at the top of the stack...
        while (stack.length > 0 && h < heights[stack[stack.length - 1]]) {
            const poppedIndex = stack.pop();
            const poppedHeight = heights[poppedIndex];

            let width;
            if (stack.length === 0) {
                width = i;
            } else {
                width = i - stack[stack.length - 1] - 1;
            }

            maxArea = Math.max(maxArea, poppedHeight * width);
        }

        stack.push(i);
    }

    // Remove the sentinel
    heights.pop();

    return maxArea;
}
9. Explanation Side-by-Side (Meaning-Wise)
Step	What it does	Meaning
stack = []	Initializes the stack	"I'll use this list to keep track of buildings in increasing height."
heights.append(0)	Adds a sentinel	"I'll add a 'dummy' building of height 0 at the end to make sure I process every building on my list."
while stack and h < ...	Finds boundaries	"I'm looking at a new building. Is it shorter than the one on top of my stack? If so,
the one on the stack can't extend any further to the right. I've found its boundary!"
popped_index = stack.pop()	Processes a rectangle	"I'll take that taller building off the stack, because I've found a shorter one."
width = ...	Calculates width	"I'll calculate the width for a rectangle using that building's height and the distance
between my current position and the building below it on the stack."
max_area = max(...)	Updates max area	"I'll check if this new rectangle is the biggest one I've found so far."
stack.append(i)	Adds to stack	"Now I'll put my current building on the stack, as it's the tallest one I've seen
in this part of the histogram so far."

Export to Sheets
10. Summary
Method	Time	Space
Brute Force (Nested Loop)	O(n¬≤)	O(1)
Optimized (Monotonic Stack)	O(n)	O(n)
Note: n=len(heights). The stack size can be up to n in the worst case.