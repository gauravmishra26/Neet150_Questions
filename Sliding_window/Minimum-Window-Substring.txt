Problem: Minimum Window Substring

Given two strings s and t, return the shortest substring of s such that every character in t, including duplicates, is present in the substring. If such a substring does not exist, return an empty string "".

You may assume that the correct output is always unique.

üß™ Example 1:

Input: s = "OUZODYXAZV", t = "XYZ"
Output: "YXAZ"
Explanation: "YXAZ" is the shortest substring that includes "X", "Y", and "Z" from string t.
1. Problem Statement
"Given strings s and t, find the shortest substring in s that contains all the characters of t."

üì¶ Input: s = "OUZODYXAZV", t = "XYZ"

üéØ Output: "YXAZ" ‚Äî This substring contains one 'X', one 'Y', and one 'Z', and is the shortest one that does.

2. Real-life Analogy
Imagine you have a long novel (s) and a list of specific letters (t) you need to find. Your task is to find the shortest possible chapter (substring in s) that contains at least one of every letter on your list. The letters can be in any order, and other letters can be in between them.

The best way to find this is to use a window that you can expand and shrink. You expand your window until you have all the required letters. Once you have them, you try to shrink the window from the left to find a shorter valid section. As soon as you remove a required letter, the window is no longer valid, so you stop shrinking and start expanding again.

3. Thought Process ‚Äî Natural Logic
This is a classic variable-sized Sliding Window problem. The core idea is to use two pointers (left and right) to define a window in s. We expand the window to the right until it contains all the characters from t. Once it does, we've found a valid candidate. We then try to shrink the window from the left to find a shorter candidate, all while maintaining the "validity" of the window.

To check for validity efficiently, we can use frequency maps.

A frequency map for t to know what characters and how many of each we need.

A frequency map for the current window in s.

A required_count variable to track how many unique characters from t we still need to satisfy. When we find a character that's required and the count in our window equals the count in t, we can decrement this counter. When the counter reaches zero, our window is valid.

4. Less Optimized Approach (Brute Force)
Logic:

Initialize min_length = infinity and result = "".

Use a nested loop. The outer loop i defines the start of a substring in s.

The inner loop j defines the end of the substring.

For each substring from i to j, check if it contains all characters of t (using a frequency map).

If it is valid and its length is less than min_length, update min_length and result.

‚è≥ Time Complexity: O(n¬≥), or O(n¬≤) with a slightly better check.

üíæ Space Complexity: O(k) where k is the size of the alphabet.

5. Optimized Approach (Sliding Window)
üí° Core Idea: Expand the window until it's valid, then shrink it to find the minimum length.

Logic:

Create t_map (frequency map for t). Initialize required_count to the number of unique characters in t.

Initialize left = 0, min_length = infinity, start_index = 0.

Iterate with a right pointer from 0 to len(s)-1.

Expand Window (Right Pointer):

Get char_right = s[right].

If char_right is in t_map:

Decrement its count in t_map.

If its count becomes 0, it means we have fulfilled the requirement for this character, so decrement required_count.

Shrink Window (Left Pointer):

Enter a while loop that runs as long as required_count == 0 (the window is valid).

Update Minimum: Calculate the current length right - left + 1. If this is smaller than min_length, update min_length and start_index.

Get char_left = s[left].

If char_left is in t_map:

Increment its count in t_map.

If its count becomes positive, it means we now need this character again, so increment required_count.

Move the left pointer: left++.

After the main loop, if min_length is still infinity, return "". Otherwise, return the substring from start_index with min_length.

‚è≥ Time Complexity: O(n + m) where n = len(s) and m = len(t). Both pointers only move forward.

üíæ Space Complexity: O(k) where k is the size of the alphabet/character set.

6. Pseudocode (with explanation)
Function minWindow(s, t):
    If t is empty: return ""

    t_map = build frequency map for t
    required_count = number of unique characters in t

    left = 0
    min_length = infinity
    start_index = 0

    // Expand the window with the right pointer.
    For right from 0 to length of s - 1:
        char_right = s[right]
        If char_right is in t_map:
            t_map[char_right]--
            If t_map[char_right] == 0:
                required_count--

        // Shrink the window if it is valid.
        While required_count == 0:
            // Update the minimum length.
            current_length = right - left + 1
            If current_length < min_length:
                min_length = current_length
                start_index = left

            // Shrink from the left.
            char_left = s[left]
            If char_left is in t_map:
                t_map[char_left]++
                If t_map[char_left] > 0:
                    required_count++ // Window is no longer valid.

            left++

    If min_length is infinity:
        Return ""
    Else:
        Return substring of s from start_index with min_length
7. Python Code (with comments)
Python

from collections import Counter

def min_window(s, t):
    if not t:
        return ""

    # Create frequency maps for t.
    t_map = Counter(t)
    required = len(t_map)

    left, right = 0, 0
    min_length = float('inf')
    start_index = 0

    # Map for the current window.
    window_map = {}

    while right < len(s):
        char_right = s[right]
        window_map[char_right] = window_map.get(char_right, 0) + 1

        # Check if we have a match for a required character.
        if char_right in t_map and window_map[char_right] == t_map[char_right]:
            required -= 1

        # If the window is valid, try to shrink it from the left.
        while required == 0:
            # Update the minimum length.
            current_length = right - left + 1
            if current_length < min_length:
                min_length = current_length
                start_index = left

            char_left = s[left]
            # If removing a character from the left breaks the validity,
            # we must stop shrinking.
            if char_left in t_map and window_map[char_left] == t_map[char_left]:
                required += 1

            window_map[char_left] -= 1
            left += 1

        right += 1

    return s[start_index:start_index + min_length] if min_length != float('inf') else ""
8. JavaScript Code (with comments)
JavaScript

/**
 * @param {string} s
 * @param {string} t
 * @return {string}
 */
function minWindow(s, t) {
    if (!t) return "";

    const tMap = new Map();
    for (const char of t) {
        tMap.set(char, (tMap.get(char) || 0) + 1);
    }

    let required = tMap.size;
    let left = 0;
    let minLength = Infinity;
    let minStart = 0;
    const windowMap = new Map();

    for (let right = 0; right < s.length; right++) {
        const charRight = s[right];
        windowMap.set(charRight, (windowMap.get(charRight) || 0) + 1);

        if (tMap.has(charRight) && windowMap.get(charRight) === tMap.get(charRight)) {
            required--;
        }

        while (required === 0) {
            const currentLength = right - left + 1;
            if (currentLength < minLength) {
                minLength = currentLength;
                minStart = left;
            }

            const charLeft = s[left];
            if (tMap.has(charLeft)) {
                if (windowMap.get(charLeft) === tMap.get(charLeft)) {
                    required++;
                }
            }
            windowMap.set(charLeft, windowMap.get(charLeft) - 1);
            left++;
        }
    }

    if (minLength === Infinity) {
        return "";
    }

    return s.substring(minStart, minStart + minLength);
}
9. Explanation Side-by-Side (Meaning-Wise)
Step	What it does	Meaning
tMap = ...	Builds frequency map for t	"I'll count how many of each letter I need to find in my notebook."
for right in s	Expands the window	"I'll slide my window to the right, one character at a time, to try to find all the letters."
if char_right in tMap...	Checks for required chars	"Does this new letter help me satisfy my requirements from my notebook? If so, I'll mark that down."
while required == 0	Checks if window is valid	"I finally have all the letters I need! Now I know I have a valid window."
min_length = ...	Updates the minimum length	"Is this current valid window the shortest I've found so far? If so, I'll remember its length and where it starts."
char_left = s[left]...	Shrinks the window	"Now that I have a valid window, I'll start cutting from the left side to see if I can make it even shorter. I'll stop as soon as I remove a required letter."

Export to Sheets
10. Summary
Method	Time	Space
Brute Force (Nested Loop)	O(n¬≤)	O(k)
Optimized (Sliding Window)	O(n+m)	O(k)
Note: n=len(s), m=len(t). k is the size of the character set, which is constant (26+26=52).