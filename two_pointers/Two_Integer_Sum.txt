Problem: Two Integer Sum II

Given an array of integers numbers that is sorted in non-decreasing order.

Return the indices (1-indexed) of two numbers, [index1, index2], such that they add up to a given target number target and index1 < index2. Note that index1 and index2 cannot be equal, therefore you may not use the same element twice.

There will always be exactly one valid solution.

Your solution must use O(1) additional space.

üß™ Example 1:

Input: numbers = [1,2,3,4], target = 3
Output: [1,2]
Explanation: The sum of 1 and 2 is 3. Since we are assuming a 1-indexed array, index1 = 1, index2 = 2. We return [1, 2].
1. Problem Statement
"Given a sorted array of integers numbers, find two numbers that add up to a target number. Return their 1-indexed positions. Your solution must use O(1) additional space."

üì¶ Input: numbers = [1,2,3,4], target = 3

üéØ Output: [1,2] ‚Äî The numbers at indices 1 and 2 (which are 1 and 2 in the array) add up to 3.

2. Real-life Analogy
Imagine you have a long list of numbers, sorted from smallest to largest, and you need to find two of them that sum to a specific total. You're not allowed to use any extra paper or a calculator, so you can't just memorize what you've seen.

A great strategy is to put one hand on the first number and the other hand on the last number.

If their sum is too small, you need a larger total. Since the list is sorted, the only way to increase the sum is to move your left hand to the right (to a larger number).

If their sum is too large, you need a smaller total. The only way to decrease the sum is to move your right hand to the left (to a smaller number).

If they equal the target, you've found the answer!

By moving your hands inward, you can quickly narrow down the possibilities without ever having to look at every single pair.

3. Thought Process ‚Äî Natural Logic
This problem looks very similar to the classic "Two Sum," but it has two new, critical constraints:

The input array is sorted.

The solution must use O(1) additional space.

These two constraints immediately rule out the hash map approach from the original "Two Sum" problem, which uses O(n) space. The sorted array is a strong hint that we should use a two-pointer approach.

4. Less Optimized Approach (Brute Force)
Logic:

Use a nested loop. The outer loop iterates through each number at index i.

The inner loop iterates through the rest of the array (from i+1) to find a number at index j.

If numbers[i] + numbers[j] equals target, you've found the answer.

‚è≥ Time Complexity: O(n¬≤)

üíæ Space Complexity: O(1)

5. Optimized Approach (Two Pointers)
üí° Core Idea: Leverage the sorted array to move two pointers from opposite ends of the array towards the middle.

Logic:

Initialize a left pointer at index 0 and a right pointer at index n-1 (the end of the array).

Enter a while loop that continues as long as left < right.

Calculate the current_sum = numbers[left] + numbers[right].

Compare current_sum to target:

If current_sum === target, you've found the pair. Return the 1-indexed left+1 and right+1.

If current_sum < target, the sum is too small. To increase the sum, we must move to a larger number. Since the array is sorted, we increment left to consider a larger value.

If current_sum > target, the sum is too large. To decrease the sum, we must move to a smaller number. We decrement right to consider a smaller value.

‚è≥ Time Complexity: O(n) ‚Äî The two pointers start at the ends and move towards each other, so in the worst case, they will meet in the middle. The total number of steps is proportional to the size of the array.

üíæ Space Complexity: O(1) ‚Äî We are only using two pointer variables, which is constant extra space.

6. Pseudocode (with explanation)
Function twoSumII(numbers, target):
    // Initialize pointers at the start and end of the array.
    left = 0
    right = length of numbers - 1

    // Loop until the pointers meet.
    While left < right:
        current_sum = numbers[left] + numbers[right]

        // Case 1: Found the pair.
        If current_sum is equal to target:
            // Return 1-based indices.
            Return [left + 1, right + 1]

        // Case 2: Sum is too small. Move left pointer to a larger number.
        Else if current_sum is less than target:
            left = left + 1

        // Case 3: Sum is too large. Move right pointer to a smaller number.
        Else:
            right = right - 1
7. Python Code (with comments)
Python

def two_sum_ii(numbers, target):
    left, right = 0, len(numbers) - 1

    # Loop until the pointers cross.
    while left < right:
        current_sum = numbers[left] + numbers[right]

        if current_sum == target:
            # Found it! Return 1-based indices.
            return [left + 1, right + 1]
        elif current_sum < target:
            # Sum is too small, need a bigger number. Move the left pointer right.
            left += 1
        else: # current_sum > target
            # Sum is too large, need a smaller number. Move the right pointer left.
            right -= 1
8. JavaScript Code (with comments)
JavaScript

/**
 * @param {number[]} numbers
 * @param {number} target
 * @return {number[]}
 */
function twoSum(numbers, target) {
    let left = 0;
    let right = numbers.length - 1;

    while (left < right) {
        const currentSum = numbers[left] + numbers[right];

        if (currentSum === target) {
            // Found the solution. Return 1-based indices.
            return [left + 1, right + 1];
        } else if (currentSum < target) {
            // Sum is too small, need to increase it.
            left++;
        } else { // currentSum > target
            // Sum is too large, need to decrease it.
            right--;
        }
    }
}
9. Explanation Side-by-Side (Meaning-Wise)
Step	What it does	Meaning
left = 0, right = n-1	Initializes two pointers	"Put one hand on the first number and one on the last."
current_sum = ...	Calculates the sum	"Add the numbers my two hands are on."
if current_sum < target	Checks if the sum is too small	"Is my total too small? If so, I need to make it bigger."
left++	Moves left pointer right	"To get a bigger number, I'll move my left hand to the right."
if current_sum > target	Checks if the sum is too big	"Is my total too big? If so, I need to make it smaller."
right--	Moves right pointer left	"To get a smaller number, I'll move my right hand to the left."
return [left+1, right+1]	Found the solution	"They equal the target! Return their original locations on the list."

Export to Sheets
10. Summary
Method	Time	Space
Less Optimized (Brute Force)	O(n¬≤)	O(1)
Optimized (Two Pointers)	O(n)	O(1)